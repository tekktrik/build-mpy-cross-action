# SPDX-FileCopyrightText: 2022 Alec Delaney, written for Adafruit Industries
#
# SPDX-License-Identifier: MIT

name: 'Build package of .mpy files'
description: 'Build mpy-cross for usage in GitHub Actions'
inputs:
  github-token:
    description: 'Your GitHub token, needed to upload the ZIP file'
    required: true
  mpy-cross-version:
    description: 'The version of mpy-cross to use'
    required: true
    default: "9.2.4"
  zip-filename:
    description: 'The name of the ZIP file to attach'
    required: true
    default: "mpy-release.zip"
  mpy-directory:
    description: >
      The directory to look for files to compile with mpy-cross.  If none
      is provided, the root directory will be used. This also becomess the
      basis for filepaths in the mpy manifest file, if one is provided.
    required: true
    default: "."
  mpy-manifest-file:
    description: >
      Path to a manifest file containing filepaths to convert. If no
      manifest is provided, all applicable files will be converted.
    required: true
    default: ""
  mpy-manifest-type:
    description: >
      The type of manifest to use for compiling if one is provided. The
      default is "include", but if "exclude" is provided, then all Python
      files EXCEPT the ones listed will be compuled with mpy-cross.
    required: true
    default: "include"
  zip-directory:
    description: >
      The directory of files to bundle.  If none is provided, the root
      directory will be used.  This also becomess the basis for filepaths
      in the zip manifest file, if one is provided.
    required: true
    default: "."
  zip-manifest-file:
    description: >
      Path to a manifest file containing filepaths to include in the zip
      file. If no manifest is provided, all files will be included. Either
      this or exclude-zip-manifest can be defined.
    required: true
    default: ""
  zip-manifest-type:
    description: >
      The type of manifest to use for zipping, if one is provided. The
      default is "include", but if "exclude" is provided, then all files
      EXCEPT the ones listed will be zipped.
    required: true
    default: "include"
runs:
  using: "composite"
  steps:
    - name: Install zip
      shell: bash
      run: |
        sudo apt install zip
    - name: Install build tools
      shell: bash
      run: |
        sudo apt install build-essential
        sudo add-apt-repository ppa:pybricks/ppa
        sudo apt install git gettext uncrustify
    - name: Download mpy-cross
      shell: bash
      run: |
        mkdir mpy-cross
        cd mpy-cross
        wget -O mpy-cross https://adafruit-circuit-python.s3.amazonaws.com/bin/mpy-cross/linux-amd64/mpy-cross-linux-amd64-${{ inputs.mpy-cross-version }}.static
        chmod +x mpy-cross
    - name: Compile MPY files
      shell: bash
      run: |
        echo "Compiling using mpy-cross version ${{ inputs.mpy-cross-version }}"
        # Read MPY manifest file contents, if needed
        if [[ "${{ inputs.mpy-manifest-file }}" != "" ]]
        then
          readarray mpymanifestfiles < "${{ inputs.mpy-manifest-file }}"
          for file in ${mpymanifestfiles[@]}
          do
            if [[ $file = *[[:space:]]* ]] || [[ $file == "#*" ]]
            then
              mpymanifestfiles=( $"{mpymanifestfiles[@]/$file}" )
            fi
          done
        fi

        # Compile MPY files
        mpyresults=()
        prempyfiles=()
        pyfiles=$(find ${{ inputs.mpy-directory }} -name "*.py" ! -name "code.py" -printf '%P\n')
        for file in ${pyfiles[@]}
        do
          if [[ "${{ inputs.mpy-manifest-file }}" == "" ]] || \
             [[ ( "${{ inputs.mpy-manifest-type }}" == "include" && "${mpymanifestfiles[*]}" =~ "${file}" ) || \
              ( "${{ inputs.mpy-manifest-type }}" == "exclude" && ! "${mpymanifestfiles[*]}" =~ "${file}" ) ]]
          then
            echo "Compiling $file"
            outputmpy="${{ inputs.mpy-directory }}/${file%.*}.mpy"
            mpyresults+=("$outputmpy")
            prempyfile="${{ inputs.mpy-directory }}/$file"
            prempyfiles+=("$prempyfile")
            mpy-cross/mpy-cross $prempyfile -o $outputmpy
          fi
        done

        # Read ZIP manifest file contents, if needed
        if [[ "${{ inputs.zip-manifest-file }}" != "" ]]
        then
          readarray zipmanifestfiles < "${{ inputs.zip-manifest-file }}"
          for file in ${zipmanifestfiles[@]}
          do
            if [[ $file = *[[:space:]]* ]] || [[ $file == "#*" ]]
            then
              zipmanifestfiles=( $"{zipmanifestfiles[@]/$file}" )
            fi
          done
        fi

        # Zip files
        zipresults=()
        allfiles=$(find ${{ inputs.zip-directory }} -type f ! -path "./.git/*" -printf '%P\n')
        for file in ${allfiles[@]}
        do

          if [[ "${{ inputs.zip-manifest-file }}" == "" ]] || \
             [[ ( "${{ inputs.zip-manifest-type }}" == "include" && "${zipmanifestfiles[*]}" =~ "${file}" ) || \
              ( "${{ inputs.zip-manifest-type }}" == "exclude" && ! "${zipmanifestfiles[*]}" =~ "${file}" ) ]]
          then
            potentialmpy="${file%.*}.mpy"
            potentialfile="$file"
            if [[ "${{ inputs.zip-directory }}" != "." ]]
            then
              potentialmpy="${{ inputs.zip-directory }}/$potentialmpy"
              potentialfile="${{ inputs.zip-directory }}/$file"
            fi

            if [[ "${prempyfiles[*]}" =~ "${potentialfile}" ]]
            then
              continue
            fi

            if [[ "${mpyresults[*]}" =~ "${potentialmpy}" ]] && [[ ! -a "$file" ]]
            then
              zipresults+=("$potentialmpy")
            else
              zipresults+=("$potentialfile")
            fi
          fi
        done

        # Create the ZIP file
        zip ${{ inputs.zip-filename }} "${zipresults[@]}"

        # Delete MPY files
        for file in ${mpyresults[@]}
        do
          echo "Deleting $file"
          rm $file
        done
    - name: Upload ZIP file to release
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        asset_path: ${{ inputs.zip-filename }}
        github_token: ${{ inputs.github-token }}
        upload_url: ${{ github.event.release.upload_url }}
    - name: Delete ZIP file
      shell: bash
      run: |
        rm ${{ inputs.zip-filename }}
